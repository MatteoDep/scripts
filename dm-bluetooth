#!/bin/sh

_bluetoothctl() {
    LC_ALL=C timeout 30 bluetoothctl
}

notify() {
    msg=${1?BUG: no message}
    urgency=${2-normal}

    if command -v notify-send >/dev/null 2>&1; then
        notify-send -u "$urgency" "  dm-bluetooth" "$msg"
    fi
}

get_devices() {
    echo "devices" | _bluetoothctl | grep 'Device' | cut -d' ' -f2-
}

get_new_devices() {
    wait_time="5"
    notify "  scanning ...\nplease wait ${wait_time}s"
    echo -e "$(timeout "$wait_time" bluetoothctl -- scan on)" | grep 'NEW' | cut -d' ' -f3-
    printf 'scan off\n' | _bluetoothctl 2>&1 >/dev/null
}

power_off() {
    printf "power off\n" | _bluetoothctl | notify "Turned off bluetooth"
}

connect_disconnect() {
    mode=${1?BUG: missing mode}
    retries=15

    # useful variables to avoid code duplicates
    case $mode in
        "connect")
            preposition=to
            expected_to_connect=yes
        ;;
        "disconnect")
            preposition=from
            expected_to_connect=no
        ;;
    esac

    # get device or scan
    devices=$(get_devices)
    scan="scan for new device"
    options=$(printf "$devices" | cut -d' ' -f2-; echo "$scan")
    name=$(printf "$options" | dmenu -p "choose device" -l 10)
    [ -z $name ] && exit 0 || printf 'power on\n' | _bluetoothctl

    # scan new device
    [ "$name" = "$scan" ] && [ "$mode" = "connect" ] && {
        gotit=0
        while [ "$gotit" -eq "0" ]; do
            devices=$(get_new_devices)
            options=$(echo "retry"; printf "$devices" | cut -d' ' -f2-)
            name=$(printf "$options" | dmenu -p "choose device" -l 10)
            [ -z $name ] && echo "HEY" && {power_off; exit 1}
            [ "$name" = "retry" ] || gotit=1
        done
        mac=$(echo $devices | grep "$name" | cut -d' ' -f1)
        printf 'pair %s\ntrust %s\n' "$mac" "$mac" | _bluetoothctl
    }

    # try to cennect/disconnect iteratively
    mac=$(printf "$devices" | grep "$name" | cut -d' ' -f1)
    notify "Attempting to $mode $preposition $name"
    i=1
    while [ "$i" -ne "$retries" ]; do
        printf '%s %s\n' "$mode" "$mac" | _bluetoothctl
        if printf 'info %s\n' "$mac" |
            _bluetoothctl |
            grep -Pq '^[\t ]+Connected: '"$expected_to_connect"; then
            notify "${mode}ed $preposition $name"
            [ "$mode" = "disconnect" ] && power_off
            exit 0
        fi
        sleep 1
        i=$((i + 1))
    done

    # case of failure
    power_off
    ret="$?"
    notify "Failed to $mode $preposition $name" "critical"
    return "$ret"
}

execute_mode(){
    local mode
    mode=${1?BUG: missing mode}

    case $mode in
        "connect"|"disconnect")
            connect_disconnect $mode
        ;;
        "power off")
            power_off
        ;;
        *)
            [ -z $mode ] || notify "Unknown mode $mode" || exit 2
            exit 1
        ;;
    esac

}

modes="connect
disconnect
power off"

choice=$(printf "$modes" | dmenu -l 10 -p "choose action")

execute_mode "$choice"
