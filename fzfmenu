#!/bin/sh
# use fzf as it was dmenu or rofi.
# multi selection is enabled by default.
# TODO:
# - bottom deleting --reverse
# - lines using terminal geometry options
# - support for font and color options (if achievable)

terminal="$TERMINAL --class floatterm -t fzfmenu"
# terminal="xterm -class floatterm -title fzfmenu"
maxlines=32
fontsize=11
x_off=0
y_off=20
marginx=0
marginy=0
paddingx=0
paddingy=0
terminal_paddingy=2
pt2pix=1.6727272727272727272727273
args="--reverse \
    --no-info \
    --bind 'tab:clear-query+execute-silent(xdotool type --delay 0 {})' \
    --print-query
    --margin $marginx,$marginy \
    --padding $paddingx,$paddingy"
usage='Usage: fzf script which replicates dmenu behaviour addfzf features.
use short dmenu options in the usual way.
fzf options can be using -L "--long-opt-1 --long-opt-2"'
tmpfile=/tmp/fzfmenu-input

usage() {
    echo "$usage"
}

get_focused_monitor_geometry(){
    geometries=$(xrandr --listactivemonitors |
        sed -n 's/^\s*[0-9]\+:.*\s\+\([0-9]\+\)\/[0-9]\+x\([0-9]\+\)\/[0-9]\++\([0-9]\+\)+\([0-9]\+\)\s.*$/\1 \2 \3 \4/p')
    eval "$(xdotool getmouselocation --shell)"

    echo "$geometries" | while read width height xoff yoff
    do
        if [ "$X" -ge "$xoff" \
            -a "$Y" -ge "$yoff" \
            -a "$X" -lt "$(($xoff+$width))" \
            -a "$Y" -lt "$(($yoff+$height))" ]
        then
            echo "$width $height $xoff $yoff"
            break
        fi
    done
}

geometry=$(get_focused_monitor_geometry)
[ -z "$geometry" ] && echo "Could not detect monitor!" && exit 1
x0=$(echo "$geometry" | cut -d' ' -f3)
y0=$(echo "$geometry" | cut -d' ' -f4)
w=$(echo "$geometry" | cut -d' ' -f1)
x=$((x0+x_off))
y=$((y0+y_off))

if [ "$1" = "--parent-proc-id" ]; then
    parent_proc_id="$2"
    args=$(echo "$*" | sed 's/--parent-proc-id [0-9]* \(.*\)/\1/')
    if [ "$3" = "--lines" ]; then
        maxlines="$4"
        args=$(echo "$args" | sed 's/--lines [0-9]* \(.*\)/\1/')
    fi
    [ "$(tail -c 1 "$tmpfile")" != "" ] && echo "" >> "$tmpfile"
    lines=$(cat "$tmpfile" | wc -l)
    [ $lines -gt $maxlines ] && lines=$maxlines

    wid=$(xdotool getactivewindow)
    xdotool windowmove "$wid" $x $y
    h=$(echo "($lines+1+2*$marginy+2*$paddingy)*$fontsize*$pt2pix \
        + 2*$terminal_paddingy" | bc)
    xdotool windowsize "$wid" $w $h

    out=$(ueberzug-wrap fzf "$args" <"$tmpfile")
    choices_num=$(echo "$out" | wc -l)
    if [ "$choices_num" -le 1 ]; then
        echo "$out" >/proc/"$parent_proc_id"/fd/1
    else
        echo "$out" | sed -n '2,$p' >/proc/"$parent_proc_id"/fd/1
    fi
else
    while getopts "bfivl:m:p:L:h" option
    do
        case "${option}" in
            [bfm]) ;;
            i) args="-i $args";;
            v) fzf -v; exit 0;;
            p) args="$args --prompt='$OPTARG'";;
            l) args="--lines $OPTARG $args";;
            L) args="$args $OPTARG";;
            h) usage; exit 0;;
            *) echo "unsupported option $option. If it is a fzf option please use the long format."
                usage; exit 1;;
        esac
    done
    shift $((OPTIND-1))

    cat /proc/"$$"/fd/0 > "$tmpfile"
    $terminal -e fzfmenu --parent-proc-id "$$" $args
fi
