#!/bin/sh

# icons file
iconsfile="${XDG_DATA_HOME:-$HOME/.local/share}/icons"

# temporary file
tmpfile=/tmp/cryptocharts

# reference currency
ref="usd"

# defaults
interval="3M"
barformat=""
chart=""
printtotal=""
endtime=20

usage(){
    echo "getcrypto [ -bc[ -i <interval>[ -r <refcrypto>]] [value1]<crypto1> [[value2]<crypto2> [...]]
convert amount of crypto to the reference currency (ex: getcrypto -c -r eur 10xmr) or display price charts.
b   formats in a single line and without spaces between icon and price.
g   display price charts
i   time interval for price charts (default=$interval)
r   in combination with '-g' reference currency (default=$ref, fiat available: usd, eur).
t   calculate total amount in the reference currency.
h   print this message and exit.
interval examples: '3d', '4w', 'march', '26-april-2020', ...
    s   Second
    m   Minute
    h   Hour
    d   Day (24 hours)
    w   Week
    M   Month (30 days)
    y   Year (365 days)
crypto examples: 'btc', 'eth', 'xmr', 'ada', ..."
}
getsym(){
    case "$1" in
        'usd') echo '$';;
        'eur') echo 'â‚¬';;
        *) awk '/ci-'"$1"';/ {print $1}' "$iconsfile";;
    esac
}

while getopts "gbti:r:h" option
do
    case "$option" in
        g) chart="true";;
        b) barformat="true";;
        t) printtotal="true";;
        i) interval="$OPTARG";;
        r) ref="$OPTARG";;
        h) usage; exit 0;;
        *) echo "unsupported option $option."
            usage; exit 1;;
    esac
done
shift $((OPTIND-1))

# delete tmpfile if present
[ -f "$tmpfile" ] && rm "$tmpfile"

if [ "$*" ]; then
    args="$*"
else
    echo "no arguments given."
    usage
    exit 1
fi
argnum=$(echo "$args" | wc -w)
count=0
[ "$printtotal" ] && total=0

for arg in $args; do
    coin=$(echo "$arg" | sed 's/[0-9]\+\.\+[0-9]\+//')
    amount="${arg%"$coin"}"
    [ "$amount" ] || amount='1'
    count=$((count + 1))

    if [ "$chart" ]; then
        timeout "$endtime" curl -s "$ref".rate.sx/"$coin"@"$interval" >> "$tmpfile"
        [ "$?" -gt 0 ] && exit 1
    else
        price=$(timeout "$endtime" curl -s "$ref".rate.sx/"$amount$coin")
        [ "$?" -gt 0 ] && exit 1
        scale=$(echo "res=2.5 - (l($price)/l(10)); scale=0; res/1" | bc -l)
        if [ "$scale" -gt 0 ]; then
            format='%.'"$scale"'f'
        else
            format="%.0f"
        fi
        refsym=$(getsym "$ref")
        coinsym=$(getsym "$coin")
        if [ "$barformat" ]; then
            printf "$coinsym$format$refsym" "$price"
            [ "$count" -lt "$argnum" ] && printf " "
        else
            printf "$coinsym $format$refsym\n" "$price"
        fi
        [ "$printtotal" ] && total=$(echo "$total+$price" | bc)
    fi
done

[ "$printtotal" ] && echo "total: $total$refsym"

if [ "$chart" ]; then
    less -SRf "$tmpfile"
    rm "$tmpfile"
fi
